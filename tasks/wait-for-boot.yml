---
  # Force ansible to know the IP address of this host so it can connect
  # This fixes things if you don't have the IP address in DNS or /etc/hosts.
- name: Set ansible_host to the new guest IP address
  set_fact: ansible_host={{ internal_ip }}
  when: internal_ip is defined

- name: wait for VM to become available before continuing
  wait_for:
    port: 22
    host: "{{ provisioning_wait_for_addr | default(ansible_host) }}"
    timeout: "{{ vm_install_timeout }}"
    search_regex: OpenSSH
  delegate_to: "{{ bastion_host | default(hyper) }}"
  when:
    - guest_exists | failed
    - guest_type == 'kickstart' or guest_type =='image'

  # This attempts to handle the common case where the new VM has a new and
  # unknown host key, because you just rebuilt this VM. Modern linux distro's
  # protect ~/.ssh linux using selinux so you'll need libselinux-python.
  # libselinux doesn't work in python virtual envs without screwing about,
  # see:
  # https://dmsimard.com/2016/01/08/selinux-python-virtualenv-chroot-and-ansible-dont-play-nice/
  # Since this is a hassle this task is set to ignore errors. Pull requests
  # are welcome! ;-)
- name: Clear known_hosts for new VM
  known_hosts:
    name: "{{ item }}"
    state: absent
  when: guest_exists | failed
  delegate_to: localhost
  with_items:
    - "{{ ansible_host }}"
    - "{{ inventory_hostname }}"
  ignore_errors: yes

- name: Wait for ssh key configuration by cloud-init
  pause: seconds=5
  when:
    - guest_exists | failed
    - guest_type is defined
...
